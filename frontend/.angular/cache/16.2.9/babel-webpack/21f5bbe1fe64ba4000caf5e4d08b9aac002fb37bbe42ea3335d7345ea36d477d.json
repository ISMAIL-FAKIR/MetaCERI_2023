{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let NotificationService = /*#__PURE__*/(() => {\n  class NotificationService {\n    // Method to set the current username\n    setUsername(username) {\n      this.username = username;\n    }\n    // Method to get the current username\n    getUsername() {\n      return this.username;\n    }\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = 'https://pedago.univ-avignon.fr:3155';\n      this.username = null;\n      // Déclaration des observables pour les messages\n      this.successMessageSource = new BehaviorSubject(null);\n      this.successMessage$ = this.successMessageSource.asObservable();\n      this.errorMessageSource = new BehaviorSubject(null);\n      this.errorMessage$ = this.errorMessageSource.asObservable();\n      this.logoutMessageSource = new BehaviorSubject(null);\n      this.logoutMessage$ = this.logoutMessageSource.asObservable();\n      this.likeMessageSource = new BehaviorSubject(null);\n      this.likeMessage$ = this.likeMessageSource.asObservable();\n      this.commentMessageSource = new BehaviorSubject(null);\n      this.commentMessage$ = this.commentMessageSource.asObservable();\n      this.shareMessageSource = new BehaviorSubject(null);\n      this.shareMessage$ = this.shareMessageSource.asObservable();\n    }\n    //affichage message de succès\n    showSuccessMessage(statusMsg) {\n      this.successMessageSource.next(statusMsg);\n      setTimeout(() => {\n        this.clearMessages();\n      }, 5000);\n    }\n    //affichage message d'erreur\n    showErrorMessage(statusMsg) {\n      this.errorMessageSource.next(statusMsg);\n      setTimeout(() => {\n        this.clearMessages();\n      }, 5000);\n    }\n    //notification de deconnexion\n    showLogoutMessage(statusMsg) {\n      this.logoutMessageSource.next(statusMsg);\n      setTimeout(() => {\n        this.clearMessages();\n      }, 5000);\n    }\n    //notification de liker\n    showLikeMessage(statusMsg) {\n      this.likeMessageSource.next(statusMsg);\n      setTimeout(() => {\n        this.clearMessages();\n      }, 5000);\n    }\n    //notification de commenter\n    showCommentMessage(statusMsg) {\n      this.commentMessageSource.next(statusMsg);\n      setTimeout(() => {\n        this.clearMessages();\n      }, 5000);\n    }\n    //notification de partager\n    showShareMessage(statusMsg) {\n      this.shareMessageSource.next(statusMsg);\n      setTimeout(() => {\n        this.clearMessages();\n      }, 5000);\n    }\n    // Méthode pour effacer les messages actuels\n    clearMessages() {\n      this.successMessageSource.next(null);\n      this.errorMessageSource.next(null);\n      this.logoutMessageSource.next(null);\n      this.commentMessageSource.next(null);\n      this.likeMessageSource.next(null);\n      this.shareMessageSource.next(null);\n    }\n    getPosts() {\n      const url = `${this.baseUrl}/getposts`;\n      return this.http.get(url);\n    }\n    //définir la dernière connexion dans le Local Storage\n    setLastLoginTime() {\n      const currentDate = new Date();\n      const lastLoginTime = currentDate.toISOString();\n      localStorage.setItem('lastLoginTime', lastLoginTime);\n    }\n    // Méthode pour récupérer la dernière connexion du Local Storage\n    getLastLoginTime() {\n      return localStorage.getItem('lastLoginTime');\n    }\n    static #_ = this.ɵfac = function NotificationService_Factory(t) {\n      return new (t || NotificationService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NotificationService,\n      factory: NotificationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return NotificationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}