{"ast":null,"code":"import _asyncToGenerator from \"/nfs/data01/data/uapv21/uapv2100315/public_html/MonProjet/frontend/MetaCARI/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let HomeComponent = class HomeComponent {\n  constructor(store, d1, _webSocket, route, notificationService) {\n    this.store = store;\n    this.d1 = d1;\n    this._webSocket = _webSocket;\n    this.route = route;\n    this.notificationService = notificationService;\n    this.successMessage = null;\n    // recuperation des variables globales \n    this.infos$ = this.store.select('infos');\n    // gestion de la pagination par rapport au type de trie et type de filtre \n    this.nextPage = 0;\n    this.nextBoolean = false;\n    this.previousBoolean = false;\n    this.previousPage = 0;\n    this.isNotLiked = true;\n    this.isLiked = false;\n    this.isFiltre = false;\n    this.isFiltreUser = false;\n    this.isTrie = false;\n    this.isTrieLikes = false;\n    this.isTrieDate = false;\n    //web socket\n    this.webSocket = _webSocket;\n  }\n  ngOnInit() {\n    var _this = this;\n    //If connexion réussie (l'affichage du bandeau sera en /home)\n    this.notificationService.successMessage$.subscribe(statusMsg => {\n      this.successMessage = statusMsg;\n      //la dernière connexion dans le service de notification\n      this.notificationService.setLastLoginTime();\n    });\n    // appel au service \n    this.d1.getPosts(1).subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (res) {\n        console.log(\"mamie !!!\", res.posts);\n        _this.posts = res.posts.data;\n        _this.connectedUsers = res.connectedUsers;\n        _this.webSocket.listen('notification').subscribe(data => {\n          _this.connectedUsers = data;\n        });\n        _this.webSocket.listen('likes').subscribe(data => {\n          _this.posts.map(item => {\n            if (item._id == data._id) {\n              console.log(\"item from component \", item._id, item.likes, \"different likes \", data.likes);\n              item.likes = data.likes;\n            }\n          });\n        });\n        // si res.posts.previous.page est défini on aura la valeur de ce dernier retourné si non undefined ce qui va permet de renvoyer 0 à la place . \n        _this.nextPage = res.posts.next?.page || 0;\n        _this.previousPage = res.posts.previous?.page || 0;\n        if (_this.nextPage != 0) {\n          _this.nextBoolean = true;\n        } else {\n          _this.nextBoolean = false;\n        }\n        if (_this.previousPage != 0) {\n          _this.previousBoolean = true;\n        } else {\n          _this.previousBoolean = false;\n        }\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }(), err => {\n      console.log(err);\n    });\n  }\n  // La méthode qui affiche le post suivant \n  nextMethod() {\n    // filtre de mes messages activé \n    if (this.isFiltre == true) {\n      console.log(\"==> clicked pur is Filtre \");\n      this.d1.FiltreVosMessage(this.nextPage).subscribe(res => {\n        this.posts = res.posts.data;\n        this.nextPage = res.posts.next?.page || 0;\n        this.previousPage = res.posts.previous?.page || 0;\n        if (this.nextPage != 0) {\n          this.nextBoolean = true;\n        } else {\n          this.nextBoolean = false;\n        }\n        if (this.previousPage != 0) {\n          this.previousBoolean = true;\n        } else {\n          this.previousBoolean = false;\n        }\n      }, err => {});\n    }\n    // filtre des autres messages activé \n    else if (this.isFiltreUser == true) {\n      this.d1.FiltreUsersMessage(this.nextPage).subscribe(res => {\n        this.posts = res.posts.data;\n        this.nextPage = res.posts.next?.page || 0;\n        this.previousPage = res.posts.previous?.page || 0;\n        if (this.nextPage != 0) {\n          this.nextBoolean = true;\n        } else {\n          this.nextBoolean = false;\n        }\n        if (this.previousPage != 0) {\n          this.previousBoolean = true;\n        } else {\n          this.previousBoolean = false;\n        }\n      }, err => {});\n    }\n    // Trie des autres messages \n    else if (this.isTrieLikes == true) {\n      console.log(\"==> clicked pour isTrieLikes \");\n      this.d1.sortLikes(this.nextPage).subscribe(res => {\n        this.posts = res.posts.data;\n        this.nextPage = res.posts.next?.page || 0;\n        this.previousPage = res.posts.previous?.page || 0;\n        if (this.nextPage != 0) {\n          this.nextBoolean = true;\n        } else {\n          this.nextBoolean = false;\n        }\n        if (this.previousPage != 0) {\n          this.previousBoolean = true;\n        } else {\n          this.previousBoolean = false;\n        }\n      }, err => {});\n    } else if (this.isTrie == true) {\n      console.log(\"==> clicked pour is isTrie\");\n      this.d1.sortConnu(this.nextPage).subscribe(res => {\n        this.posts = res.posts.data;\n        this.nextPage = res.posts.next?.page || 0;\n        this.previousPage = res.posts.previous?.page || 0;\n        if (this.nextPage != 0) {\n          this.nextBoolean = true;\n        } else {\n          this.nextBoolean = false;\n        }\n        if (this.previousPage != 0) {\n          this.previousBoolean = true;\n        } else {\n          this.previousBoolean = false;\n        }\n      }, err => {\n        console.log(err);\n      });\n    } else if (this.isTrieDate == true) {\n      console.log(\"==> clicked pour is isTrieDate\");\n      this.d1.sortDate(this.nextPage).subscribe(res => {\n        this.posts = res.posts.data;\n        this.nextPage = res.posts.next?.page || 0;\n        this.previousPage = res.posts.previous?.page || 0;\n        if (this.nextPage != 0) {\n          this.nextBoolean = true;\n        } else {\n          this.nextBoolean = false;\n        }\n        if (this.previousPage != 0) {\n          this.previousBoolean = true;\n        } else {\n          this.previousBoolean = false;\n        }\n      }, err => {\n        console.log(err);\n      });\n    }\n    // Si aucun filtre ou trie n'est spécifié, On trie par likes .\n    else {\n      console.log(\"==> clicked pour rien \");\n      this.d1.sortLikes(this.nextPage).subscribe(res => {\n        this.posts = res.posts.data;\n        this.nextPage = res.posts.next?.page || 0;\n        this.previousPage = res.posts.previous?.page || 0;\n        if (this.nextPage != 0) {\n          this.nextBoolean = true;\n        } else {\n          this.nextBoolean = false;\n        }\n        if (this.previousPage != 0) {\n          this.previousBoolean = true;\n        } else {\n          this.previousBoolean = false;\n        }\n        console.log(this.posts);\n      }, err => {\n        console.log(err);\n      });\n    }\n  }\n  // La methode qui affiche le post precedant \n  previousMethod() {\n    if (this.isFiltre == true) {\n      this.d1.FiltreVosMessage(this.previousPage).subscribe(res => {\n        this.posts = res.posts.data;\n        this.nextPage = res.posts.next?.page || 0;\n        this.previousPage = res.posts.previous?.page || 0;\n        if (this.nextPage != 0) {\n          this.nextBoolean = true;\n        } else {\n          this.nextBoolean = false;\n        }\n        if (this.previousPage != 0) {\n          this.previousBoolean = true;\n        } else {\n          this.previousBoolean = false;\n        }\n      }, err => {});\n    } else if (this.isFiltreUser == true) {\n      this.d1.FiltreUsersMessage(this.previousPage).subscribe(res => {\n        this.posts = res.posts.data;\n        this.nextPage = res.posts.next?.page || 0;\n        this.previousPage = res.posts.previous?.page || 0;\n        if (this.nextPage != 0) {\n          this.nextBoolean = true;\n        } else {\n          this.nextBoolean = false;\n        }\n        if (this.previousPage != 0) {\n          this.previousBoolean = true;\n        } else {\n          this.previousBoolean = false;\n        }\n      }, err => {});\n    } else if (this.isTrieLikes == true) {\n      this.d1.sortLikes(this.previousPage).subscribe(res => {\n        this.posts = res.posts.data;\n        this.nextPage = res.posts.next?.page || 0;\n        this.previousPage = res.posts.previous?.page || 0;\n        if (this.nextPage != 0) {\n          this.nextBoolean = true;\n        } else {\n          this.nextBoolean = false;\n        }\n        if (this.previousPage != 0) {\n          this.previousBoolean = true;\n        } else {\n          this.previousBoolean = false;\n        }\n      }, err => {});\n    } else if (this.isTrieDate == true) {\n      this.d1.sortDate(this.previousPage).subscribe(res => {\n        this.posts = res.posts.data;\n        this.nextPage = res.posts.next?.page || 0;\n        this.previousPage = res.posts.previous?.page || 0;\n        if (this.nextPage != 0) {\n          this.nextBoolean = true;\n        } else {\n          this.nextBoolean = false;\n        }\n        if (this.previousPage != 0) {\n          this.previousBoolean = true;\n        } else {\n          this.previousBoolean = false;\n        }\n      }, err => {});\n    } else if (this.isTrie == true) {\n      this.d1.sortConnu(this.previousPage).subscribe(res => {\n        this.posts = res.posts.data;\n        this.nextPage = res.posts.next?.page || 0;\n        this.previousPage = res.posts.previous?.page || 0;\n        if (this.nextPage != 0) {\n          this.nextBoolean = true;\n        } else {\n          this.nextBoolean = false;\n        }\n        if (this.previousPage != 0) {\n          this.previousBoolean = true;\n        } else {\n          this.previousBoolean = false;\n        }\n      }, err => {\n        console.log(err);\n      });\n    } else {\n      this.d1.sortLikes(this.previousPage).subscribe(res => {\n        this.posts = res.posts.data;\n        this.nextPage = res.posts.next?.page || 0;\n        this.previousPage = res.posts.previous?.page || 0;\n        if (this.nextPage != 0) {\n          this.nextBoolean = true;\n        } else {\n          this.nextBoolean = false;\n        }\n        if (this.previousPage != 0) {\n          this.previousBoolean = true;\n        } else {\n          this.previousBoolean = false;\n        }\n        console.log(this.posts);\n      }, err => {\n        console.log(err);\n      });\n    }\n  }\n  onLike(f2) {\n    console.log(f2.value);\n    if (this.isLiked == false) {\n      this.d1.setLike(f2.value.idPost).subscribe(res => {\n        console.log(\"reussi\");\n      }, err => {\n        console.log(\"it's an error\", err);\n      });\n      this.isLiked = true;\n      this.isNotLiked = false;\n    } else {\n      this.d1.removeLike(f2.value.idPost).subscribe(res => {});\n      this.isLiked = false;\n      this.isNotLiked = true;\n    }\n  }\n  onSubmit(f) {\n    let today = new Date();\n    f.value.date = today.getFullYear() + '-' + today.getMonth() + '-' + today.getDate();\n    f.value.hour = today.getHours() + ':' + today.getMinutes();\n    console.log(\"MonCommentaire est le suivant :\", f.value);\n    this.d1.setComment(f.value).subscribe(res => {\n      this._flashMessagesService.show(\"Commentaire ajouté avec succée\", {\n        cssClass: 'alert-success',\n        timeout: 10000\n      });\n      this.route.navigate(['/home']);\n    }, err => {\n      console.log(err);\n    });\n  }\n  DestroySession() {\n    this.d1.DestroySession().subscribe(res => {\n      this._flashMessagesService.show(\"Vous êtes bien déconnecté, merci à bientôt\", {\n        cssClass: 'alert-success',\n        timeout: 10000\n      });\n      this.route.navigate(['/']);\n    }, err => {\n      console.log(err);\n    });\n  }\n  onSearch(f3) {\n    this.route.navigate(['/search/' + f3.value.searchText]);\n  }\n  onItemSelected(f4) {\n    //Trie par Likes\n    if (f4.value.selectItem === '0') {\n      // Initialisation de la page.\n      this.nextPage = 1;\n      this.previousPage = 0;\n      //gestion de la pagination\n      this.isTrieLikes = true;\n      this.isTrie = false;\n      this.isFiltre = false;\n      this.isTrieDate = false;\n      this.isFiltreUser = false;\n      // gestion des buttons next et previous de l'interface \n      this.nextBoolean = true;\n      this.previousBoolean = false;\n      // Appel au service qui trie par propriètaire \n      this.d1.sortLikes(this.nextPage).subscribe(res => {\n        this.posts = res.posts.data;\n        // gestion des buttons next et previous. \n        console.log(\"mes Posts ==> no no bla matbki \", res.posts);\n        this.nextPage = res.posts.next?.page || 0;\n        this.previousPage = res.posts.previous?.page || 0;\n        if (this.nextPage != 0) {\n          this.nextBoolean = true;\n        } else {\n          this.nextBoolean = false;\n        }\n        if (this.previousPage != 0) {\n          this.previousBoolean = true;\n        } else {\n          this.previousBoolean = false;\n        }\n        console.log(this.posts);\n      }, err => {\n        console.log(err);\n      });\n    }\n    // Trie Par Date \n    else if (f4.value.selectItem === '1') {\n      // Initialisation de la page.\n      this.nextPage = 1;\n      this.previousPage = 0;\n      //gestion de la pagination\n      this.isTrieDate = true;\n      this.isTrie = false;\n      this.isFiltre = false;\n      this.isTrieLikes = false;\n      this.isFiltreUser = false;\n      // gestion des buttons next et previous de l'interface \n      this.nextBoolean = true;\n      this.previousBoolean = false;\n      // Appel au service qui trie par propriètaire \n      this.d1.sortDate(this.nextPage).subscribe(res => {\n        this.posts = res.posts.data;\n        // gestion des buttons next et previous. \n        console.log(\"mes Posts ==> no no bla matbki \", res.posts);\n        this.nextPage = res.posts.next?.page || 0;\n        this.previousPage = res.posts.previous?.page || 0;\n        if (this.nextPage != 0) {\n          this.nextBoolean = true;\n        } else {\n          this.nextBoolean = false;\n        }\n        if (this.previousPage != 0) {\n          this.previousBoolean = true;\n        } else {\n          this.previousBoolean = false;\n        }\n        console.log(this.posts);\n      }, err => {\n        console.log(err);\n      });\n    }\n    //Trie par Propriètaire\n    else if (f4.value.selectItem === '2') {\n      // Initialisation de la page.\n      this.nextPage = 1;\n      this.previousPage = 0;\n      // gestion des buttons next et previous de l'interface \n      this.nextBoolean = true;\n      this.previousBoolean = false;\n      //gestion de la pagination\n      this.isTrie = true;\n      this.isFiltre = false;\n      this.isTrieLikes = false;\n      this.isTrieDate = false;\n      this.isFiltreUser = false;\n      // Appel au service qui trie par propriètaire \n      this.d1.sortConnu(this.nextPage).subscribe(res => {\n        this.posts = res.posts.data;\n        // gestion des buttons next et previous. \n        console.log(\"mes Posts ==> no no bla matbki \", res.posts);\n        this.nextPage = res.posts.next?.page || 0;\n        this.previousPage = res.posts.previous?.page || 0;\n        if (this.nextPage != 0) {\n          this.nextBoolean = true;\n        } else {\n          this.nextBoolean = false;\n        }\n        if (this.previousPage != 0) {\n          this.previousBoolean = true;\n        } else {\n          this.previousBoolean = false;\n        }\n        console.log(this.posts);\n      }, err => {\n        console.log(err);\n      });\n    } else {\n      console.log(\"veuillez selectionner un item\");\n    }\n  }\n  onShared(f5) {\n    console.log(f5.value);\n    this.d1.shared(f5.value.idPost, f5.value.username, f5.value.msg).subscribe(res => {\n      this._flashMessagesService.show(\"Post partagé avec succées\", {\n        cssClass: 'alert-success',\n        timeout: 10000\n      });\n    }, err => {});\n  }\n  onFiltre(f10) {\n    this.nextBoolean = true;\n    this.previousBoolean = false;\n    //gestion de la pagination\n    this.isTrie = false;\n    this.isTrieLikes = false;\n    this.isTrieDate = false;\n    if (f10.value.FiltreVosMessage == true && f10.value.FiltreMessage == true) {\n      console.log(\"veuillez selectionnez un seul Filtre\");\n    } else if (f10.value.FiltreMessage == true) {\n      console.log(\"Filtre En fonction des messages des autres est selectionné Merci\");\n      this.isFiltre = false;\n      this.d1.FiltreUsersMessage(1).subscribe(res => {\n        this.posts = res.posts.data;\n        this.isFiltreUser = true;\n        this.nextPage = res.posts.next?.page || 0;\n        this.previousPage = res.posts.previous?.page || 0;\n        if (this.nextPage != 0) {\n          this.nextBoolean = true;\n        } else {\n          this.nextBoolean = false;\n        }\n        if (this.previousPage != 0) {\n          this.previousBoolean = true;\n        } else {\n          this.previousBoolean = false;\n        }\n      }, err => {});\n    } else if (f10.value.FiltreVosMessage == true) {\n      console.log(\"Mes messages vont être affiché\");\n      this.isFiltreUser = false;\n      this.d1.FiltreVosMessage(1).subscribe(res => {\n        this.posts = res.posts.data;\n        this.isFiltre = true;\n        this.nextPage = res.posts.next?.page || 0;\n        this.previousPage = res.posts.previous?.page || 0;\n        if (this.nextPage != 0) {\n          this.nextBoolean = true;\n        } else {\n          this.nextBoolean = false;\n        }\n        if (this.previousPage != 0) {\n          this.previousBoolean = true;\n        } else {\n          this.previousBoolean = false;\n        }\n      }, err => {});\n    } else {\n      this.isFiltre = false;\n      this.isTrie = false;\n      console.log(\"aucun filtre n'est selectionné \");\n    }\n  }\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})], HomeComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}