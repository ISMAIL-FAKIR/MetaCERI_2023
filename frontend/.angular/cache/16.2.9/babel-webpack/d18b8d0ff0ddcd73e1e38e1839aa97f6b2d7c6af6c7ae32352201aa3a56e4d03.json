{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let HomeComponent = class HomeComponent {\n  constructor(notificationService, router, postsService) {\n    this.notificationService = notificationService;\n    this.router = router;\n    this.postsService = postsService;\n    this.successMessage = null;\n    //pour la pagination \n    this.posts = [];\n    this.currentPage = 1;\n    this.totalPages = 1;\n    // Ajouter des propriétés pour les filtres\n    this.filterByOwner = false;\n    this.selectedHashtag = null;\n    this.allHashtags = [];\n  }\n  logout() {\n    this.notificationService.showLogoutMessage('Déconnexion réussie, By By !');\n    localStorage.removeItem('lastLoginTime');\n    this.router.navigate(['/login']);\n  }\n  loadPosts(page) {\n    this.postsService.getPosts(page).subscribe(data => {\n      this.posts = data.posts;\n      this.currentPage = page;\n      this.totalPages = data.totalPages;\n    }, error => {\n      console.error('Error loading posts', error);\n    });\n  }\n  likePost(post) {\n    this.postsService.likePost(post._id).subscribe(() => {\n      this.loadPosts(this.currentPage);\n    });\n  }\n  // ajouter un commentaire\n  addComment(post, newComment) {\n    this.postsService.addComment(post._id, newComment).subscribe(data => {\n      console.log('Comment added successfully:', data);\n      this.loadPosts(this.currentPage);\n    }, error => {\n      console.error('Error adding comment', error);\n    });\n  }\n  toggleComments(post) {\n    post.showComments = !post.showComments;\n  }\n  sharePost(post) {\n    // Logique de partage du post\n  }\n  ngOnInit() {\n    //If connexion réussie (l'affichage du bandeau sera en /home)\n    this.notificationService.successMessage$.subscribe(statusMsg => {\n      this.successMessage = statusMsg;\n      //la dernière connexion dans le service de notification\n      this.notificationService.setLastLoginTime();\n    });\n    this.notificationService.getPosts().subscribe(data => {\n      this.posts = data.posts;\n      this.currentPage = 1;\n      this.totalPages = 30;\n    });\n  }\n  // trois méthodes pour trier les messages et les filtrer \n  sortByOwner() {\n    this.posts = this.posts.sort((a, b) => (this.filterByOwner ? a.creator === this.notificationService.getUsername() ? -1 : 1 : 0) || (a.creator > b.creator ? 1 : -1));\n  }\n  sortByDate() {\n    this.posts = this.posts.sort((a, b) => a.date > b.date ? 1 : -1);\n  }\n  sortByPopularity() {\n    this.posts = this.posts.sort((a, b) => a.likes < b.likes ? 1 : -1);\n  }\n  // Ajouter des méthodes pour gérer les filtres\n  toggleFilterByOwner() {\n    this.filterByOwner = !this.filterByOwner;\n    this.applyFilters();\n  }\n  selectHashtag(hashtag) {\n    this.selectedHashtag = hashtag;\n    this.applyFilters();\n  }\n  clearFilters() {\n    this.filterByOwner = false;\n    this.selectedHashtag = null;\n    this.applyFilters();\n  }\n  applyFilters() {\n    // Appliquer les filtres\n    this.notificationService.getPosts().subscribe(posts => {\n      let filteredPosts = [...posts];\n      const currentUsername = this.notificationService.getUsername();\n      if (this.filterByOwner && currentUsername) {\n        filteredPosts = filteredPosts.filter(post => post.creator === currentUsername);\n      }\n      if (this.selectedHashtag) {\n        filteredPosts = filteredPosts.filter(post => post.hashtags && post.hashtags.includes(this.selectedHashtag));\n      }\n      // Appliquer le tri après avoir appliqué les filtres\n      this.posts = filteredPosts.sort((a, b) => (this.filterByOwner && currentUsername ? a.creator === currentUsername ? -1 : 1 : 0) || (a.date > b.date ? 1 : -1));\n    });\n  }\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})], HomeComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}