{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let NotificationService = /*#__PURE__*/(() => {\n  class NotificationService {\n    constructor() {\n      // Déclaration des observables pour les messages de succès et d'erreur\n      this.successMessageSource = new BehaviorSubject(null);\n      this.successMessage$ = this.successMessageSource.asObservable();\n      this.errorMessageSource = new BehaviorSubject(null);\n      this.errorMessage$ = this.errorMessageSource.asObservable();\n    }\n    //affichage message de succès 10 sec\n    showSuccessMessage(statusMsg) {\n      this.successMessageSource.next(statusMsg);\n      setTimeout(() => {\n        this.clearMessages();\n      }, 10000);\n    }\n    //affichage message d'erreur 10 sec\n    showErrorMessage(statusMsg) {\n      this.errorMessageSource.next(statusMsg);\n      setTimeout(() => {\n        this.clearMessages();\n      }, 10000);\n    }\n    // Méthode pour effacer les messages actuels\n    clearMessages() {\n      this.successMessageSource.next(null);\n      this.errorMessageSource.next(null);\n    }\n    //définir la dernière connexion dans le Local Storage\n    setLastLoginTime() {\n      const currentDate = new Date();\n      const lastLoginTime = currentDate.toISOString();\n      localStorage.setItem('lastLoginTime', lastLoginTime);\n    }\n    // Méthode pour récupérer la dernière connexion du Local Storage\n    getLastLoginTime() {\n      return localStorage.getItem('lastLoginTime');\n    }\n    static #_ = this.ɵfac = function NotificationService_Factory(t) {\n      return new (t || NotificationService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NotificationService,\n      factory: NotificationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return NotificationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}